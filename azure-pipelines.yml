
name: $(VersionNumberMajor).$(VersionNumberMinor).$(VersionNumberBuild).$(Rev:.rrrr)
#name: $(GitVersion_NuGetVersion)

resources:
- repo: self
  fetchDepth: 30

pool:
  name: DCT
  demands:
  - IsBuildServer
  - msbuild
  - visualstudio
  - vstest

variables:
  VersionNumberMajor: '1'
  VersionNumberMinor: '2'
  VersionNumberBuild: '0'
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  Parameters.solution: '**\*.sln'
  Parameters.nugetFeedName: 'dct-pkg'

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@4
  displayName: GitVersion
  enabled: false
  inputs:
    updateAssemblyInfo: true
    preferBundledVersion: false

- task: PowerShell@2
  displayName: 'Work out Build number (days since 01 Jan 2019)'
  inputs:
    targetType: 'inline'
    script: 'Write-Host "Generating Build Number"
      $baseDate = [datetime]"01/01/2019"
      $currentDate = $(Get-Date)
      $interval = NEW-TIMESPAN –Start $baseDate –End $currentDate
      $days = $interval.Days
      
      Write-Host "##vso[task.setvariable variable=VersionNumberBuild]$days"'

- task: VersionAssemblies@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    VersionNumber: '$(Build.BuildNumber)'
    InjectVersion: False
    FilenamePattern: 'AssemblyInfo.*'
    OutputVersion: 'OutputedVersion'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet >=4.7.0'
  inputs:
    versionSpec: '>=4.7.0'

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '$(Parameters.solution)'
    vstsFeed: '$(Parameters.nugetFeedName)'

- task: VSBuild@1
  displayName: 'Build solution **\*.sln'
  inputs:
    solution: '$(Parameters.solution)'
    msbuildArgs: '/p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    clean: true

- task: CopyFiles@2
  displayName: 'Copy NuGet Packages : Artifact NuGet Packages Directory'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     **\*.nupkg
     !**\*Interface*.nupkg
     !**\packages\**\*.nupkg
    TargetFolder: '$(build.artifactstagingdirectory)\NuGet'
    CleanTargetFolder: true
    flattenFolders: true
    
- task: CopyFiles@2
  displayName: 'Copy NuGet Packages : Artifact NuGet Interface Packages Directory'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: |
     **\*Interface*.nupkg
     !**\packages\**\*.nupkg
    TargetFolder: '$(build.artifactstagingdirectory)\NuGet Interface'
    CleanTargetFolder: true
    flattenFolders: true

- task: VSTest@2
  displayName: 'VsTest - testAssemblies'
  inputs:
    testAssemblyVer2: |
     **\$(BuildConfiguration)\*test*.dll
     !**\obj\**
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: PublishSymbols@2
  displayName: 'Publish symbols path'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
  enabled: false
  continueOnError: true

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\*.WPF\bin\$(BuildConfiguration)\**
      !**\*.pdb'
    TargetFolder: '$(build.ArtifactStagingDirectory)\DC-ILR-1920-Desktop'

- task: TotalALM.totalalm-tokenization.tokenization-build-task.Tokenization@2
  displayName: 'Tokenization: Transform Application config file'
  inputs:
    SourcePath: '$(build.ArtifactStagingDirectory)\DC-ILR-1920-Desktop'
    TargetFileNames: Cloud.xml
    RequireVariable: false

  ## Create Zip File for Deployment     
- task: ArchiveFiles@2
  enabled: false
  displayName: 'Package WebJobs for Website'
  inputs:
    rootFolderOrFile: '$(build.BinariesDirectory)\tmp'
    includeRootFolder: false
    archiveFile: '$(build.ArtifactStagingDirectory)\DC-ILR-1920-Desktop.$(Build.BuildNumber).zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
